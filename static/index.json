[{ "location": "search/_", "title": "", "text": "", "tags": null }, { "location": "roadmap/", "title": "Roadmap", "text": "Quo vadis? The port of the original Material theme has replicated nearly all of its features. A few are still missing but I've good news: the Hugo community is actively working on this issues. Maybe with the next release of Hugo we can abandon this list. Stay tuned.\n\nLocalization\n\nCurrently, it is possible to collect all strings in a single place for easy customization. However, this only enables you to define all strings in a single language. This approach is quite limiting in terms of localization support. Therefore, I decided to wait for a native integration. This way we can avoid a second setup of all strings in your website.\n\nKeep an eye on #1734.\n\nSearch\n\nBeside third-party services, some hacky workarounds and Grunt-/Gulp-based scripts that only require unnecessary dependencies, future versions of Hugo will support the generation of a content index as a core feature.\n\nThis approach plays well with this theme since MkDocs does the same.\n\nKeep an eye on #1853.\n\nContributing\n\nDid you found an bug or you would like to suggest a new feature? I'm open for feedback. Please open a new issue and let me know.\n\nYou're also welcome to contribute with pull requests.", "tags": null }, { "location": "adding-content/", "title": "Adding content", "text": "Hello world\n\nLet's create our first content file for your documentation. Open a terminal and add the following command for each new file you want to add. Replace section-name with a general term that describes your document in detail.\n\nhugo new section-name/filename.md\n\nVisitors of your website will find the final document under www.example.com/section-name/filename/.\n\nSince it's possible to have multiple content files in the same section I recommend to create at least one index.md file per section. This ensures that users will find an index page under www.example.com/section-name.\n\nHomepage\n\nTo add content to the homepage you need to add a small indicator to the frontmatter of the content file:\n\ntype: index\n\nOtherwise the theme will not be able to find the corresponding content file.\n\nTable of contents\n\nYou maybe noticed that the menu on the left contains a small table of contents of the current page. All h2 tags (## Headline in Markdown) will be added automatically.\n\nAdmonitions\n\nAdmonition is a handy feature that adds block-styled side content to your documentation, for example hints, notes or warnings. It can be enabled by using the corresponding shortcodes inside your content:\n\n{{/ note title=\"Note\" /}}\nNothing to see here, move along.\n{{/ /note /}}\n\nThis will print the following block:\n\n{{ note title=\"Note\" }}\nNothing to see here, move along.\n{{ /note }}\n\nThe shortcode adds a neutral color for the note class and a red color for the warning class. You can also add a custom title:\n\n{{/ warning title=\"Don't try this at home\" /}}\nNothing to see here, move along.\n{{/ /warning /}}\n\nThis will print the following block:\n\n{{ warning title=\"Don't try this at home\" }}\nNothing to see here, move along.\n{{ /warning }}", "tags": null }, { "location": "license/", "title": "License", "text": "Copyright (c) 2016 Digitalcraftsman digitalcraftsman@protonmail.combr\nCopyright (c) 2016 Martin Donath martin.donath@squidfunk.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", "tags": null }, { "location": "_", "title": "Material for Hugo", "text": "Beautiful documentation\n\nMaterial is a theme for Hugo, a fast and flexible static site generator. It is built using Google's material design\nguidelines, fully responsive, optimized for touch and pointer devices as well\nas all sorts of screen sizes.\n\nMaterial Screenshot\n\nMaterial is very lightweight – it is built from scratch using Javascript and\nCSS that weighs less than 30kb (minified, gzipped and excluding Google Fonts\nand Analytics). Yet, it is highly customizable and degrades gracefully in older\nbrowsers.\n\nQuick start\n\nInstall with git:\n\ngit clone git@github.com:digitalcraftsman/hugo-material-docs.git themes/hugo-material-docs\n\nFeatures\n\nBeautiful, readable and very user-friendly design based on Google's material\n  design guidelines, packed in a full responsive template with a well-defined\n  and easily customizable color palette, great typography, as well as a\n  beautiful search interface and footer.\n\nWell-tested and optimized Javascript and CSS including a cross-browser\n  fixed/sticky header, a drawer that even works without Javascript using\n  the checkbox hack with fallbacks, responsive tables that scroll when\n  the screen is too small and well-defined print styles.\n\nExtra configuration options like a project logo, links to the authors\n  GitHub and Twitter accounts and display of the amount of stars the\n  project has on GitHub.\n\nWeb application capability on iOS – when the page is saved to the homescreen,\n  it behaves and looks like a native application.\n\nSee the getting started guide for instructions how to get\nit up and running.\n\nAcknowledgements\n\nLast but not least a big thank you to Martin Donath. He created the original Material theme for Hugo's companion MkDocs. This port wouldn't be possible without him.\n\nFurthermore, thanks to Steve Francia for creating Hugo and the awesome community around the project.", "tags": null }, { "location": "getting-started/", "title": "Getting started", "text": "Installation\n\nInstalling Hugo\n\nHugo itself is just a single binary without dependencies on expensive runtimes like Ruby, Python or PHP and without dependencies on any databases. You just need to download the latest version. For more information read the official installation guides.\n\nLet's make sure Hugo is set up as expected. You should see a similar version number in your terminal:\n\nhugo version\nHugo Static Site Generator v0.15 BuildDate: 2016-01-03T12:47:47+01:00\n\nInstalling Material\n\nNext, assuming you have Hugo up and running the hugo-material-docs theme can be installed with git:\n\ncreate a new Hugo website\nhugo new site my-awesome-docs\n\nmove into the themes folder of your website\ncd my-awesome-docs/themes/\n\ndownload the theme\ngit clone git@github.com:digitalcraftsman/hugo-material-docs.git\n\nSetup\n\nNext, take a look in the exampleSite folder at themes/hugo-material-docs/. This directory contains an example config file and the content that you are currently reading. It serves as an example setup for your documentation.\n\nCopy at least the config.toml in the root directory of your website. Overwrite the existing config file if necessary.\n\nHugo includes a development server, so you can view your changes as you go -\nvery handy. Spin it up with the following command:\n\nhugo server\n\nNow you can go to localhost:1313 and the Material\ntheme should be visible. You can now start writing your documentation, or read\non and customize the theme through some options.\n\nConfiguration\n\nBefore you are able to deploy your documentation you should take a few minute to adjust some information in the config.toml. Open the file in an editor:\n\nbaseurl = \"https://example.com/\"\nlanguageCode = \"en-us\"\ntitle = \"Material Docs\"\n\n[params]\n  # General information\n  author = \"Digitalcraftsman\"\n  description = \"A material design theme for documentations.\"\n  copyright = \"Released under the MIT license\"\n\nOptions\n\nGithub integration\n\nIf your project is hosted on GitHub, add the repository link to the\nconfiguration. If the provider equals GitHub, the Material theme will\nadd a download and star button, and display the number of stars:\n\n[params]\n  # Repository\n  provider = \"GitHub\"\n  repourl = \"https://github.com/digitalcraftsman/hugo-material-docs\"\n\nAdding a version\n\nIn order to add the current version next to the project banner inside the\ndrawer, you can set the variable version:\n\n[params]\n  version = \"1.0.0\"\n\nThis will also change the link behind the download button to point to the\narchive with the respective version on GitHub, assuming a release tagged with\nthis exact version identifier.\n\nAdding a logo\n\nIf your project has a logo, you can add it to the drawer/navigation by defining\nthe variable logo. Ideally, the image of your logo should have\nrectangular shape with a minimum resolution of 128x128 and leave some room\ntowards the edges. The logo will also be used as a web application icon on iOS.\nEither save your logo somewhere in the static/ folder and reference the file relative to this location or use an external URL:\n\n[params]\n  logo = \"images/logo.png\"\n\nAdding a custom favicon\n\nFavicons are small small icons that are displayed in the tabs right next to the title of the current page. As with the logo above you need to save your favicon in static/ and link it relative to this folder or use an external URL:\n\n[params]\n  favicon = \"favicon.ico\"\n\nGoogle Analytics\n\nYou can enable Google Analytics by replacing UA-XXXXXXXX-X with your own tracking code.\n\ngoogleAnalytics = \"UA-XXXXXXXX-X\"\n\nSmall tweaks\n\nThis theme provides a simple way for making small adjustments, that is changing\nsome margins, centering text, etc. The customcss and customjs option allow you to add further CSS and JS files. They can either reside locally in the /static folder or on an external server, e.g. a CDN. In both cases use either the relative path to /static or the absolute URL to the external ressource.\n\n[params]\n  # Custom assets\n  customcss = [\n    \"foo.css\",\n    \"bar.css\"\n  ]\n\n  customjs  = [\"buzz.js\"]\n\nChanging the color palette\n\nMaterial defines a default hue for every primary and accent color on Google's\nmaterial design color palette. This makes it very easy to change the overall look of the theme. Just set the variables palette.primary and palette.accent to one of the colors defined in the palette:\n\n[params.palette]\n  primary = \"red\"\n  accent  = \"light-green\"\n\nColor names can be written upper- or lowercase but must match the names of the\nmaterial design color palette. Valid values are: red, pink, purple, deep purple, indigo, blue, light-blue, cyan, teal, green, light-green,\nlime, yellow, amber, orange, deep-orange, brown, grey and\nblue-grey. The last three colors can only be used as a primary color.\n\nColor palette\n\nIf the color is set via this configuration, an additional CSS file called\npalettes.css is included that defines the color palettes.\n\nChanging the font family\n\nMaterial uses the Ubuntu font family by default, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can be easily changed to other fonts, like for example Google's own Roboto font:\n\n[params.font]\n  text = \"Roboto\"\n  code = \"Roboto Mono\"\n\nThe text font will be loaded in font-weights 400 and 700, the monospaced\nfont in regular weight.\n\nSyntax highlighting\n\nThis theme uses the popular Highlight.js library to colorize code examples. The default theme is called Github with a few small tweaks. You can link our own theme if you like. Again, store your stylesheet in the static/ folder and set the relative path in the config file:\n\n[params]\n  # Syntax highlighting theme\n  highlightcss  = \"path/to/theme.css\"\n\nAdding a GitHub and Twitter account\n\nIf you have a GitHub and/or Twitter account, you can add links to your\naccounts to the drawer by setting the variables github and\ntwitter respectively:\n\n[social]\n  twitter = \"\"\n  github  = \"digitalcraftsman\"\n\nAdding menu entries\n\nOnce you created your first content files you can link them manually in the sidebar on the left. A menu entry has the following schema:\n\n[[menu.main]]\n  name   = \"Material\"\n  url    = \"/\"\n  weight = 0\n  pre    = \"\"\n\nname is the title displayed in the menu and url the relative URL to the content. The weight attribute allows you to modify the order of the menu entries. A menu entry appears further down the more weight you add. The pre attribute is optional and allows you to prepend elements to a menu link, e.g. an icon.\n\nInstead of just linking a single file you can enhance the sidebar by creating a nested menu. This way you can list all pages of a section instead of linking them one by one (without nesting).\n\nYou need extend the frontmatter of each file content file in a section slightly. The snippet below registers this content file as 'child' of a menu entry that already exists.\n\nmenu:\n  main:\n    parent: Material\n    identifier: link name\n    weight: 0\n\nmain specifies to which menu the content file should be added. main is the only menu in this theme by default. parent let's you register this content file to an existing menu entry, in this case the Material link. Note that the parent in the frontmatter needs to match the name in config.toml.\n\nidentifier is the link that is shown in the menu. Ideally you choose the same name for the identifier and the title of the page. Again, weight allows you to change the order of the nested links in a section.\n\nMarkdown extensions\n\nHugo uses Blackfriday to process your content. For a detailed description of all options take a look at the Blackfriday configuration section in the Hugo documentation.\n\n[blackfriday]\n  smartypants = true\n  fractions = true\n  smartDashes = true\n  plainIDAnchors = true\n`", "tags": null }]